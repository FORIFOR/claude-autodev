# プロジェクト名：perfect-keiba-AI
You are building a “High-Precision GⅠ Betting AI” tool in Python that achieves at least 90% hit-rate on Grade 1 races and, for any given race, recommends a set of bets totaling up to ¥5,000. Follow these requirements exactly:

1. Data Collection Module  
   • Implement connectors to fetch data from:  
     – JRA-VAN official API: past 10 years GⅠ race results (1–3着, 人気, 枠順, 払戻金, 上がり3F, 馬体重, 騎手・厩舎データ)  
     – netkeiba: 当日オッズ（単勝・複勝・馬連・3連複・3連単）、調教タイム、パドック評価をスクレイピング  
     – 気象API（OpenWeatherMapなど）: レース当日の天候、気温、湿度  
   • Normalize and store all data in a SQL database with well-designed schema.

2. Feature Engineering  
   • Compute per馬 features:  
     – 人気別事前勝率（過去10年GⅠ実績）  
     – オッズ逆数（implied probability）  
     – 前走間隔（週数）  
     – 馬体重増減  
     – 上がり3Fタイム比較（過去3走平均との偏差）  
     – コース・馬場適性スコア（距離・馬場別着度数）  
   • Compute per騎手／厩舎 features:  
     – 直近1ヶ月勝率・連対率・複勝率  
     – GⅠレース成績

3. Probability Model  
   • Build a Bayesian model that combines「人気別事前勝率」and「implied probability」to produce posterior P(1着), P(2着), P(3着) per horse.  
   • Fit a small logistic-regression or lightGBM ensemble on historical GⅠ data to refine these posteriors against truth.

4. Monte Carlo Simulation  
   • Simulate 10,000 races per query by sampling without replacement 3馬 per race according to the posterior probabilities.  
   • Tabulate frequencies of top 3 finish combinations (3連単) and unordered top 3 sets (3連複).

5. Bet Optimizer  
   • Given a budget of ¥5,000, solve a constrained optimization problem to select bets (3連単フォーメーション, 3連複, 馬連, ワイド, 単勝) such that:  
     – Total stake ≤ ¥5,000  
     – Estimated combined hit-rate ≥ 90%  
     – Expected value (EV) = ∑(prob_i × payout_i) – stake > 0  
   • Use Kelly criterion or linear programming to allocate stake across selected bets.

6. Output Format  
   • Return JSON with fields:  
     {  
       "race_id": string,  
       "timestamp": ISO-8601,  
       "bets": [  
         {"type":"3連単","combination":[A,B,C],"stake":¥X,"hit_rate":Y%,"payout":¥Z},  
         …  
       ],  
       "total_stake":¥5000,  
       "estimated_hit_rate":90.0,  
       "expected_return":¥NNNN (回収率 XXX%)  
     }

7. Code Quality  
   • Write production-grade Python (PEP8, type hints).  
   • Use pandas, numpy, scikit-learn, lightgbm, scipy.optimize (for LP).  
   • Include unit tests for each module and a demo script `predict_and_recommend.py --race_id 20250615T11`.  
   • Provide comprehensive docstrings and a README with setup instructions, sample outputs, and license.

Deliver a complete Claude Code project scaffolding:  
- `data/` scripts for ETL  
- `models/` for training and inference  
- `simulate/` Monte Carlo scripts  
- `optimize/` bet allocation  
- `cli.py` or `api.py` to call the tool  
- `tests/` for CI  

Ensure the generated tool, when run, ingests live data and prints a ¥5,000 purchase plan that meets the goals above.
